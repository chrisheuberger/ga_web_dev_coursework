{
  "name": "expres",
  "version": "0.0.5",
  "description": "Add express compatible methods to your response object",
  "main": "expres.js",
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "supertest": "~0.3.1",
    "clone": "~0.1.1"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cpsubrian/node-expres.git"
  },
  "homepage": "https://github.com/cpsubrian/node-expres",
  "keywords": [
    "res",
    "response",
    "express",
    "middleware"
  ],
  "author": {
    "name": "Brian Link",
    "email": "cpsubrian@gmail.com"
  },
  "license": "MIT",
  "readme": "expRes\n======\n\nMiddleware to add express compatible methods to your response objects.\n\n[![build status](https://secure.travis-ci.org/cpsubrian/node-expres.png)](http://travis-ci.org/cpsubrian/node-expres)\n\nUsage\n-----\n\n```js\nvar expres = require('expres'),\n    server = require('http').createServer();\n\nserver.on('request', expres.middleware);\n\n// ...\n```\n\nResponse Methods Added\n----------------------\n\n### status(code)\nSet status `code`.\n\n    res.status(400);\n\n### links(links)\n\nSet Link header field with the given `links`.\n\n    res.links({\n      next: 'http://api.example.com/users?page=2',\n      last: 'http://api.example.com/users?page=5'\n    });\n\n### type(type)\n\nSet the Content-Type to `type`.\n\n    res.type('application/json');\n\n### send(body|status, [body])\n\nSend a response.\n\n    res.send(new Buffer('wahoo'));\n    res.send({ some: 'json' });\n    res.send('<p>some html</p>');\n    res.send(404, 'Sorry, cant find that');\n    res.send(404);\n\n### json(obj|status, [obj])\n\nSend JSON response.\n\n    res.json(null);\n    res.json({ user: 'tj' });\n    res.json(500, 'oh noes!');\n    res.json(404, 'I dont have that');\n\n### jsonp(obj|status, [obj])\n\nSend JSON response with JSONP callback support.\n\n    res.jsonp(null);\n    res.jsonp({ user: 'tj' });\n    res.jsonp(500, 'oh noes!');\n    res.jsonp(404, 'I dont have that');\n\n### format(obj)\n\nRespond to the Acceptable formats using an `obj`\nof content-type callbacks.\n\nContent-Type is set for you, however if you choose\nyou may alter this within the callback using `res.type()`\nor `res.set('Content-Type', ...)`.\n\n    res.format({\n      'text/plain': function () {\n        res.send('hey');\n      },\n      'text/html': function () {\n        res.send('<p>hey</p>');\n      },\n      'appliation/json': function () {\n        res.send({ message: 'hey' });\n      }\n    });\n\nBy default expres passes an `Error`\nwith a `.status` of 406 to `next(err)`\nif a match is not made. If you provide\na `.default` callback it will be invoked\ninstead.\n\n### set(field, [val])\n\nSet header `field` to `val`, or pass\nan object of header fields.\n\n    res.set('Accept', 'application/json');\n    res.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n\nAliased as `res.header()`.\n\n### get(field)\n\nGet value for header `field`.\n\n### redirect(toUrl, [status])\n\nRedirect to the given `url` with optional response `status`\ndefaulting to 302.\n\nThe given `url` can also be the name of a mapped url, for\nexample by default expres supports \"back\" which redirects\nto the _Referrer_ or _Referer_ headers or \"/\".\n\n    res.redirect('/foo/bar');\n    res.redirect('http://example.com');\n    res.redirect(301, 'http://example.com');\n    res.redirect('http://example.com', 301);\n    res.redirect('../login'); // /blog/post/1 -> /blog/login\n\n\nCredit\n------\n\nMany of the methods and tests are copied verbatim from express, so, thanks TJ :)\n\n- - -\n\n### Developed by [Terra Eclipse](http://www.terraeclipse.com)\nTerra Eclipse, Inc. is a nationally recognized political technology and\nstrategy firm located in Aptos, CA and Washington, D.C.\n\n- - -\n\n### License: MIT\n\n- Copyright (c) 2009-2012 TJ Holowaychuk <tj@vision-media.ca>\n- Copyright (C) 2012 Terra Eclipse, Inc. (http://www.terraeclipse.com/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cpsubrian/node-expres/issues"
  },
  "_id": "expres@0.0.5",
  "_shasum": "bf4484749f83920cb116d6baf6da230220d1fb9c",
  "_from": "expres@",
  "_resolved": "https://registry.npmjs.org/expres/-/expres-0.0.5.tgz"
}
